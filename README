`seaskirt` is yet another Python wrapper for communicating with the
[Asterisk](https://wiki.asterisk.org/wiki/display/AST/Home)
open-source telephony engine. Besides Python 3.7 or later, you will
also need the python3-wsproto package installed.

I first put this module together about a decade and a half ago, when I
was first learning about Asterisk and Python. Then more recently I
dusted it off, and updated it for Python 3 and more recent Asterisk
versions (specifically, tested with Asterisk 16 and Asterisk 20),
adding very basic support for Asterisk’s newer ARI protocol.

I know there are more elaborate alternatives available elsewhere (see
the list below), but I thought I would keep this one simple. For
example, if you want to run an event listener, I don’t provide any
elaborate pattern-matching mechanism for you to register which events
matter to you: your listener gets everything, and it is up to you to
decide which ones to look at and which ones to ignore.

The main classes are available in both synchronous (blocking)
and asynchronous (asyncio-based) variants. Both variants are
generated from a common code base via an experimental technique
involving AST transformations. One drawback of this is that
tracebacks report incorrect source lines.

I haven’t done much documentation for this (besides what’s in the source
module), but examples of its use can be found at
[GitLab](https://gitlab.com/ldo/seaskirt_examples) and
[GitHub](https://github.com/ldo/seaskirt_examples).


The Asterisk API Zoo
====================

Asterisk has accumulated a slightly bewildering variety of
communication APIs over its long history.

To start with, there is the
[**Asterisk Manager Interface**](https://wiki.asterisk.org/wiki/display/AST/The+Asterisk+Manager+TCP+IP+API)
(or “AMI”). Asterisk listens for Manager connections (by default on TCP port 5038),
which have to be authenticated according to a valid username+password
combination from the settings in `manager.conf` or `manager.d/*`. Once a client has opened
and authenticated a manager connection, it can request _actions_ to perform
(information about these can be obtained from the Asterisk console with
the command “`manager show actions`”), and it can also listen for
unsolicited _events_ (from the list from the “`manager show events`” command).

Then, there is the
[**Asterisk Gateway Interface**](https://wiki.asterisk.org/wiki/pages/viewpage.action?pageId=32375589)
(or “AGI”). Here, Asterisk initiates the connection to your program,
either by launching it in a child process using the
[`AGI`](https://wiki.asterisk.org/wiki/display/AST/Application_AGI)
or [`EAGI`](https://wiki.asterisk.org/wiki/display/AST/Application_EAGI)
dialplan applications, or by connecting to your already-running process
listening on some specified port via the
[FastAGI protocol](https://www.voip-info.org/asterisk-agi/).

The set of requests your AGI program can send to Asterisk is listed in
the output from the “`agi show commands`” console command. Meanwhile,
execution of the dialplan context is suspended until the AGI
connection terminates, or the call is hung up.

Originally, there was essentially no overlap in the functionality
offered by these two separate communication interfaces. AMI let you
perform operations affecting Asterisk as a whole, and even initiate
calls and do some manipulation of them. But you could not, for
example, listen for DTMF tones on a channel; that was the province of
AGI. Conversely, an AGI connection could send audio from a file and
listen for DTMF digits, but it could only operate on a single call,
with no way to perform operations across multiple calls without
complicated juggling of multiple AGI connections.

So, in
[Asterisk version 10](https://wiki.asterisk.org/wiki/display/AST/New+in+10)
(as near as I can tell) from 2011, the
[AsyncAGI option](https://wiki.asterisk.org/wiki/display/AST/Asterisk+14+Application_AGI)
was introduced. If the application command

    AGI(agi:async)

is executed on a channel, then the channel enters the AsyncAGI state:
it stops executing further dialplan applications from the context
definition, and instead, it now expects to be driven via AGI commands
delivered on an AMI connection. These commands are sent using the
special
[“`AGI`” manager action](https://wiki.asterisk.org/wiki/display/AST/ManagerAction_AGI),
and must include a reference to the channel being controlled (which
must be in the AsyncAGI state).

The AMI client can cause the channel to leave the AsyncAGI state
either by hanging up the call, or by resuming execution of the context
definition with the `asyncagi break` AGI command, which you should see
in the list from “`agi show commands`”.

Early versions of the AMI protocol had some rather ad-hoc behaviour.
For example, trying to determine whether a request would trigger a single
response or multiple responses required a lot of special casing.
But with
[Asterisk 12 from 2014](https://wiki.asterisk.org/wiki/display/AST/New+in+12),
we now have the
[AMI v2 specification](https://wiki.asterisk.org/wiki/display/AST/AMI+v2+Specification).
While that document is not complete on its own, evidence from
experiments elsewhere suggest that the protocol is now
a lot more regular.

Asterisk 12 also introduced yet another communication API, the
[**Asterisk RESTful Interface**](https://wiki.asterisk.org/wiki/pages/viewpage.action?pageId=29395573)
(or “ARI”). This looks like it is meant as a complete replacement
for both AMI and AGI, though of course the older communication mechanisms
continue to be supported, likely indefinitely.

ARI is accessed through Asterisk’s mini-HTTP server, which listens by default
on port 8088. Note that this has its own authentication setup defined in `ari.conf`,
separate from the AMI one. At the same time, the ability was also introduced to
[operate AMI over HTTP](https://wiki.asterisk.org/wiki/display/AST/Allow+Manager+Access+via+HTTP),
but it appears this is now deprecated.

[ARI requests](https://wiki.asterisk.org/wiki/display/AST/Asterisk+12+ARI)
are implemented as HTTP requests of various types; note the use of
`PUT`, `POST` and `DELETE` requests to cause state changes, for example, while
`GET` is used to retrieve information.

Further, channels can be put into “stasis”, suspending further
execution of dialplan applications from the context definition
(similar to AsyncAGI state). In this state, the channel can be told to
execute arbitrary dialplan applications via direct ARI requests. The
channel exits from stasis when the call is hung up, or a client posts
the `/channels/`_channelid_`/continue` REST method call.

The
[`Stasis`](https://wiki.asterisk.org/wiki/display/AST/Asterisk+12+Application_Stasis)
dialplan application, which puts the channel into stasis,
supports the concept of custom “application names”. This
allows a suitable client program (which can be the same one
initiating ARI requests, or a different one) to listen for
events related to that application via a
[WebSocket client connection](https://wiki.asterisk.org/wiki/display/AST/Getting+Started+with+ARI#GettingStartedwithARI-ConfiguringAsterisk)
with parameters specifying that same custom application name. It will
now receive notifications (in JSON format) each time something happens
on channels that are currently in stasis in that application name.

In fact, it is a
[**requirement**](https://wiki.asterisk.org/wiki/display/AST/Asterisk+Configuration+for+ARI)
for there to be a WebSocket listener
for an application name before any channel is allowed to enter
stasis for that application.

According to this [blog post](https://www.asterisk.org/stasis-improvements-goodbye-dialplan/),
Asterisk 16.3 also added the capability in 2019 to create new channels
entirely from thin air with ARI calls, without reference to any
contexts defined in the dialplan.


Actions Versus Events
=====================

Regardless of the manager interface (AMI or ARI), Asterisk still has the common
concept of “actions” versus “events”. “Actions” are requests to Asterisk to do
something (such as initiate or hangup a call, or just return some info), and it
is probably best to distinguish _direct_ responses to such requests, versus
_unsolicited_ events indicating interesting happenings within the Asterisk system
(which might or might not be direct consequences of some prior action).
For example, a typical response to “Originate” (dial) a call might be an
indication that the call has successfully started, and there will likely be more
events later as the call progresses and is eventually hung up, even while the
same manager connection accepts additional requests to initiate other calls or
do other things.

In addition to this, in AMI in particular, it is possible to receive more than
one response “event” from certain actions which might return variable amounts of
information.

Because these overlapping responses can get potentially confusing, it is
probably best to create separate AMI connections for communicating
requests/responses, versus ones just for listening to unsolicited events. In
fact, ARI _enforces_ this separation, since the main REST protocol is only for
requests/responses, while event listening has to be done by setting up a
dedicated WebSocket connection.


The State Of Python Wrappers
============================

Looking at the available Python wrappers for the above APIs,
things seem rather fragmentary. The
[official Asterisk source repositories](https://github.com/asterisk)
include ones for AMI/AGI ([StarPy](https://github.com/asterisk/starpy))
and ARI ([ari-py](https://github.com/asterisk/ari-py)). The former
repo has seen no updates for about 2½ years as of this writing,
and the latter nothing for about 8 years. In other words, both
projects seem moribund.

The following table summarizes the state of other Python wrappers
that I’m aware of, listing which Asterisk APIs they support and whether
they work with `asyncio`.

| Name | AMI | AGI | ARI | `asyncio` |
|----------|-----|----------|-----|------------|
| [`pyst2`](https://github.com/jfernandz/pyst2) | yes | yes | no | no (uses threads) |
| [`py-asterisk`](https://github.com/jeansch/py-asterisk) | yes | no | no | no |
| [`panoramisk`](https://github.com/gawel/panoramisk/) | yes | FastAGI only | no | yes |
| [`asyncari`](https://github.com/M-o-a-T/asyncari/) | no | no | yes | via [`anyio`](https://github.com/agronholm/anyio) |

Lawrence D'Oliveiro <ldo@geek-central.gen.nz>
2022 December 10
